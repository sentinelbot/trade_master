import ccxt
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from datetime import datetime, timedelta
import asyncio
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Function to fetch historical market data
def fetch_historical_data(symbol, exchange_id='binance', timeframe='1h', start_date=None, end_date=None):
    try:
        exchange_class = getattr(ccxt, exchange_id)
        exchange = exchange_class()

        # Set default dates if not provided
        if start_date is None:
            start_date = exchange.parse8601('30 days ago')
        if end_date is None:
            end_date = exchange.parse8601('now')

        # Fetch OHLCV data
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since=start_date, limit=1000)
        data = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')

        return data
    except Exception as e:
        logger.error(f"Error fetching historical data: {e}")
        raise

# Function to fetch real-time market data
async def fetch_realtime_data(symbol, exchange_id='binance', timeframe='1m'):
    try:
        exchange_class = getattr(ccxt, exchange_id)
        exchange = exchange_class()

        # Fetch the latest OHLCV data
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=1)
        data = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')

        return data
    except Exception as e:
        logger.error(f"Error fetching real-time data: {e}")
        raise

# Function to preprocess data (normalization and feature engineering)
def preprocess_data(data):
    try:
        # Normalize close and volume
        scaler = StandardScaler()
        price_scaler = StandardScaler()

        data['close_normalized'] = price_scaler.fit_transform(data[['close']])
        data['volume_normalized'] = scaler.fit_transform(data[['volume']])

        # Feature Engineering: Moving Averages, RSI, MACD
        data['ma_50'] = data['close'].rolling(window=50).mean()
        data['ma_200'] = data['close'].rolling(window=200).mean()
        data['rsi'] = compute_rsi(data['close'])
        data['macd'] = compute_macd(data['close'])

        # Drop NaN values generated by rolling calculations
        data = data.dropna()

        return data
    except Exception as e:
        logger.error(f"Error preprocessing data: {e}")
        raise

# Function to compute RSI
def compute_rsi(series, period=14):
    try:
        delta = series.diff(1)
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        return 100 - (100 / (1 + rs))
    except Exception as e:
        logger.error(f"Error computing RSI: {e}")
        raise

# Function to compute MACD
def compute_macd(series, short_window=12, long_window=26, signal_window=9):
    try:
        short_ema = series.ewm(span=short_window, adjust=False).mean()
        long_ema = series.ewm(span=long_window, adjust=False).mean()
        macd = short_ema - long_ema
        signal = macd.ewm(span=signal_window, adjust=False).mean()
        return macd - signal
    except Exception as e:
        logger.error(f"Error computing MACD: {e}")
        raise

# Telegram Integration
async def start(update: Update, context):
    try:
        user_first_name = update.message.from_user.first_name
        welcome_message = f'Welcome to TradeMaster, {user_first_name}! Use /help to see available commands or choose an option below:'

        # Create inline keyboard with common commands
        keyboard = [
            [InlineKeyboardButton("Portfolio Overview", callback_data="portfolio")],
            [InlineKeyboardButton("Market Data", callback_data="market_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text("An error occurred. Please try again.")

async def help_command(update: Update, context):
    try:
        help_text = """
        Available commands:
        /start - Start the bot
        /help - Show this help menu
        /market <exchange> <symbol> - Get real-time market data (e.g., /market binance BTC/USDT)
        /portfolio - Get portfolio overview (total value and assets)
        /allocation - Get asset allocation pie chart
        /rebalance - Get portfolio rebalancing suggestions
        /trades - Get recent trade history
        /report - Generate performance report
        /alert <symbol> <price> - Set a price alert (e.g., /alert BTC/USDT 50000)
        /margin - Check margin levels
        /chart <symbol> <timeframe> - Get candlestick chart (e.g., /chart BTC/USDT 1h)
        /pnl - Get profit/loss chart
        /preferences <key>=<value> - Set user preferences (e.g., /preferences show_btc_trades=true)
        /getpreferences - Get your current preferences
        /meanreversion - Execute mean reversion strategy
        /momentum - Execute momentum trading strategy
        /stoploss <symbol> <stop_loss> <take_profit> - Set stop-loss and take-profit levels (e.g., /stoploss BTC/USDT 49000 51000)
        /predict - Predict the next price for BTC/USDT
        /sentiment <text> - Analyze market sentiment from provided text
        /anomaly - Detect anomalies in price data
        /trainrl - Train a reinforcement learning model
        /ethbalance - Check your Ethereum balance
        /compare <symbol1> <symbol2> - Compare performance of two assets
        /watchlist - View your current watchlist
        /addwatch <symbol> - Add symbol to your watchlist
        /removewatch <symbol> - Remove symbol from your watchlist
        /news <symbol> - Get latest news for a symbol
        /gridtrading <symbol> <lower_price> <upper_price> <grid_levels> - Execute grid trading strategy
        /arbitrage - Find arbitrage opportunities
        /2fa <code> - Verify 2FA code
        /compliance <symbol> <quantity> - Check trade compliance
        /efficientfrontier - Optimize portfolio using Efficient Frontier
        /taxloss - Perform tax-loss harvesting
        /sync - Sync trade history with Google Sheets
        /papertrade - Simulate trading without real money
        /realtimetrade - Execute real-time trades based on RL model signals
        """

        keyboard = [
            [InlineKeyboardButton("Trading Commands", callback_data="help_trading")],
            [InlineKeyboardButton("Analysis Commands", callback_data="help_analysis")],
            [InlineKeyboardButton("Settings Commands", callback_data="help_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(help_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await update.message.reply_text("An error occurred. Please try again.")

async def button_callback(update: Update, context):
    try:
        query = update.callback_query
        await query.answer()

        if query.data == "portfolio":
            await get_portfolio_overview(update.callback_query, context)
        elif query.data == "market_menu":
            keyboard = [
                [InlineKeyboardButton("BTC/USDT", callback_data="market_binance_BTC/USDT")],
                [InlineKeyboardButton("ETH/USDT", callback_data="market_binance_ETH/USDT")],
                [InlineKeyboardButton("Custom Symbol", callback_data="market_custom")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("Select a market pair:", reply_markup=reply_markup)
        elif query.data.startswith("market_binance_"):
            symbol = query.data.replace("market_binance_", "")
            context.args = ["binance", symbol]
            await get_market_data(update.callback_query, context)
        elif query.data == "chart_menu":
            keyboard = [
                [InlineKeyboardButton("BTC/USDT 1h", callback_data="chart_BTC/USDT_1h")],
                [InlineKeyboardButton("ETH/USDT 1h", callback_data="chart_ETH/USDT_1h")],
                [InlineKeyboardButton("Custom Chart", callback_data="chart_custom")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("Select a chart:", reply_markup=reply_markup)
        elif query.data.startswith("chart_") and not query.data == "chart_custom":
            parts = query.data.replace("chart_", "").split("_")
            if len(parts) == 2:
                symbol, timeframe = parts
                context.args = [symbol, timeframe]
                await get_candlestick_chart(update.callback_query, context)
        elif query.data == "alert_menu":
            keyboard = [
                [InlineKeyboardButton("BTC Alert", callback_data="alert_setup_BTC/USDT")],
                [InlineKeyboardButton("ETH Alert", callback_data="alert_setup_ETH/USDT")],
                [InlineKeyboardButton("Custom Alert", callback_data="alert_custom")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("Select an alert type:", reply_markup=reply_markup)
        elif query.data.startswith("help_"):
            category = query.data.replace("help_", "")
            await show_category_help(query, category)
        else:
            await query.edit_message_text(f"Selected option: {query.data}\nThis feature is being implemented.")
    except Exception as e:
        logger.error(f"Error in button callback: {e}")
        await query.edit_message_text("An error occurred. Please try again.")

async def show_category_help(query, category):
    try:
        if category == "trading":
            text = """
            Trading Commands:
            /market <exchange> <symbol> - Get real-time market data
            /stoploss <symbol> <stop_loss> <take_profit> - Set stop-loss and take-profit levels
            /meanreversion - Execute mean reversion strategy
            /momentum - Execute momentum trading strategy
            /gridtrading <symbol> <lower_price> <upper_price> <grid_levels> - Execute grid trading strategy
            /arbitrage - Find arbitrage opportunities
            /realtimetrade - Execute real-time trades based on RL model signals
            /papertrade - Simulate trading without real money
            """
        elif category == "analysis":
            text = """
            Analysis Commands:
            /chart <symbol> <timeframe> - Get candlestick chart
            /pnl - Get profit/loss chart
            /predict - Predict the next price for BTC/USDT
            /sentiment <text> - Analyze market sentiment
            /anomaly - Detect anomalies in price data
            /compare <symbol1> <symbol2> - Compare performance of two assets
            """
        elif category == "settings":
            text = """
            Settings Commands:
            /preferences <key>=<value> - Set user preferences
            /getpreferences - Get your current preferences
            /watchlist - View your current watchlist
            /addwatch <symbol> - Add symbol to your watchlist
            /removewatch <symbol> - Remove symbol from your watchlist
            /2fa <code> - Verify 2FA code
            /compliance <symbol> <quantity> - Check trade compliance
            /efficientfrontier - Optimize portfolio using Efficient Frontier
            /taxloss - Perform tax-loss harvesting
            /sync - Sync trade history with Google Sheets
            """
        else:
            text = "Category not found. Use /help to see all commands."

        await query.edit_message_text(text)
    except Exception as e:
        logger.error(f"Error in show category help: {e}")
        await query.edit_message_text("An error occurred. Please try again.")

# Function to get portfolio overview
async def get_portfolio_overview(update: Update, context):
    try:
        # Placeholder implementation
        await update.message.reply_text("Portfolio overview is not implemented yet.")
    except Exception as e:
        logger.error(f"Error in get portfolio overview: {e}")
        await update.message.reply_text("An error occurred. Please try again.")

# Function to get market data
async def get_market_data(update: Update, context):
    try:
        exchange_id = context.args[0]
        symbol = context.args[1]
        data = await fetch_realtime_data(symbol, exchange_id)
        await update.message.reply_text(f"Market data for {symbol} on {exchange_id}:\n{data}")
    except Exception as e:
        logger.error(f"Error in get market data: {e}")
        await update.message.reply_text("An error occurred. Please try again.")

# Function to get candlestick chart
async def get_candlestick_chart(update: Update, context):
    try:
        symbol = context.args[0]
        timeframe = context.args[1]
        data = await fetch_realtime_data(symbol, 'binance', timeframe)
        await update.message.reply_text(f"Candlestick chart for {symbol} ({timeframe}):\n{data}")
    except Exception as e:
        logger.error(f"Error in get candlestick chart: {e}")
        await update.message.reply_text("An error occurred. Please try again.")

# Example usage
if __name__ == "__main__":
    symbol = "BTC/USDT"
    exchange_id = "binance"

    # Fetch historical data
    historical_data = fetch_historical_data(symbol, exchange_id)
    print("Historical Data:")
    print(historical_data.head())

    # Preprocess data
    processed_data = preprocess_data(historical_data)
    print("\nProcessed Data:")
    print(processed_data.head())

    # Fetch real-time data
    loop = asyncio.get_event_loop()
    realtime_data = loop.run_until_complete(fetch_realtime_data(symbol, exchange_id))
    print("\nReal-Time Data:")
    print(realtime_data)

"""
Data handler module for the TradeMaster bot.
Handles fetching and processing of historical and real-time market data.
"""

import os
import pandas as pd
import ccxt
import logging
from datetime import datetime, timedelta

def fetch_historical_data(exchange_id, symbol, timeframe='1h', limit=100):
    """
    Fetch historical OHLCV (Open, High, Low, Close, Volume) data from an exchange.
    
    Args:
        exchange_id: String identifier for the exchange (e.g., 'binance')
        symbol: Trading pair symbol (e.g., 'BTC/USDT')
        timeframe: Candle timeframe (e.g., '1h', '1d')
        limit: Number of candles to fetch
        
    Returns:
        DataFrame with OHLCV data
    """
    try:
        # Initialize exchange
        exchange_class = getattr(ccxt, exchange_id)
        exchange = exchange_class({
            'enableRateLimit': True,
        })
        
        # Fetch the OHLCV data
        candles = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        
        # Convert to DataFrame
        df = pd.DataFrame(candles, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        
        # Convert timestamp to datetime
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        
        return df
    
    except Exception as e:
        logging.error(f"Error fetching historical data: {str(e)}")
        raise Exception(f"Failed to fetch historical data: {str(e)}")

def fetch_realtime_data(exchange_id, symbol):
    """
    Fetch real-time ticker data from an exchange.
    
    Args:
        exchange_id: String identifier for the exchange (e.g., 'binance')
        symbol: Trading pair symbol (e.g., 'BTC/USDT')
        
    Returns:
        Dictionary with current market data
    """
    try:
        # Initialize exchange
        exchange_class = getattr(ccxt, exchange_id)
        exchange = exchange_class({
            'enableRateLimit': True,
        })
        
        # Fetch ticker
        ticker = exchange.fetch_ticker(symbol)
        
        # Extract relevant information
        market_data = {
            'symbol': ticker['symbol'],
            'last_price': ticker['last'],
            'bid': ticker['bid'],
            'ask': ticker['ask'],
            'volume_24h': ticker['quoteVolume'],
            'change_24h': ticker['percentage'],
            'high_24h': ticker['high'],
            'low_24h': ticker['low'],
            'timestamp': datetime.fromtimestamp(ticker['timestamp'] / 1000).strftime('%Y-%m-%d %H:%M:%S')
        }
        
        return market_data
    
    except Exception as e:
        logging.error(f"Error fetching real-time data: {str(e)}")
        raise Exception(f"Failed to fetch real-time data: {str(e)}")

def aggregate_market_data(data_list, aggregation_period='1h'):
    """
    Aggregate market data into OHLCV candles of specified period.
    
    Args:
        data_list: List of market data ticks
        aggregation_period: Period to aggregate by ('1m', '5m', '1h', etc.)
        
    Returns:
        DataFrame with aggregated OHLCV data
    """
    # Convert to DataFrame
    df = pd.DataFrame(data_list)
    
    # Ensure timestamp is datetime
    if 'timestamp' in df.columns and not pd.api.types.is_datetime64_any_dtype(df['timestamp']):
        df['timestamp'] = pd.to_datetime(df['timestamp'])
    
    # Resample based on aggregation period
    period_map = {
        '1m': '1min', '5m': '5min', '15m': '15min', '30m': '30min',
        '1h': '1H', '4h': '4H', '1d': 'D', '1w': 'W'
    }
    
    # Group by time period
    df_resampled = df.resample(period_map[aggregation_period], on='timestamp').agg({
        'price': ['first', 'max', 'min', 'last'],
        'volume': 'sum'
    })
    
    # Flatten multi-level columns
    df_resampled.columns = ['open', 'high', 'low', 'close', 'volume']
    
    return df_resampled

def calculate_indicators(df):
    """
    Calculate common technical indicators for the given OHLCV data.
    
    Args:
        df: DataFrame with OHLCV data
        
    Returns:
        DataFrame with added technical indicators
    """
    # Make a copy to avoid modifying the original
    result = df.copy()
    
    # Simple Moving Averages
    result['sma_20'] = result['close'].rolling(window=20).mean()
    result['sma_50'] = result['close'].rolling(window=50).mean()
    result['sma_200'] = result['close'].rolling(window=200).mean()
    
    # Exponential Moving Averages
    result['ema_12'] = result['close'].ewm(span=12, adjust=False).mean()
    result['ema_26'] = result['close'].ewm(span=26, adjust=False).mean()
    
    # MACD (Moving Average Convergence Divergence)
    result['macd'] = result['ema_12'] - result['ema_26']
    result['macd_signal'] = result['macd'].ewm(span=9, adjust=False).mean()
    result['macd_hist'] = result['macd'] - result['macd_signal']
    
    # RSI (Relative Strength Index)
    delta = result['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    result['rsi'] = 100 - (100 / (1 + rs))
    
    # Bollinger Bands
    result['bb_middle'] = result['close'].rolling(window=20).mean()
    result['bb_std'] = result['close'].rolling(window=20).std()
    result['bb_upper'] = result['bb_middle'] + (result['bb_std'] * 2)
    result['bb_lower'] = result['bb_middle'] - (result['bb_std'] * 2)
    
    return result

def save_data_to_csv(df, filename, directory='data'):
    """
    Save data to a CSV file.
    
    Args:
        df: DataFrame to save
        filename: Name of the file
        directory: Directory to save the file in
        
    Returns:
        Path to the saved file
    """
    # Ensure directory exists
    os.makedirs(directory, exist_ok=True)
    
    # Full path
    filepath = os.path.join(directory, filename)
    
    # Save to CSV
    df.to_csv(filepath, index=True)
    
    return filepath

def load_data_from_csv(filename, directory='data'):
    """
    Load data from a CSV file.
    
    Args:
        filename: Name of the file
        directory: Directory where the file is located
        
    Returns:
        DataFrame with loaded data
    """
    # Full path
    filepath = os.path.join(directory, filename)
    
    # Load from CSV
    df = pd.read_csv(filepath, index_col=0, parse_dates=True)
    
    return df